USE NORTHWIND

-- 1. Productos m√°s baratos y caros de nuestra BBDD:
-- Desde la divisi√≥n de productos nos piden conocer el precio de los productos que tienen el precio m√°s alto y m√°s bajo. 
-- Dales el alias lowestPrice y highestPrice.

SELECT *
FROM products;

SELECT  MIN(unit_price) AS 'lowestPrice', MAX(unit_price) AS 'highestPrice'
FROM products;

-- 2. Conociendo el numero de productos y su precio medio:
-- Adicionalmente nos piden que dise√±emos otra consulta para conocer el n√∫mero de productos y el precio medio de todos ellos 
-- (en general, no por cada producto).
 
SELECT *
FROM products;

SELECT COUNT(product_id) AS 'Recuento Art.' , AVG(unit_price) AS 'Media Total'
FROM products;

-- 3. Sacad la m√°xima y m√≠nima carga de los pedidos de UK:
-- Nuestro siguiente encargo consiste en preparar una consulta que devuelva la m√°xima y m√≠nima cantidad de carga para un pedido (freight) 
-- enviado a Reino Unido (United Kingdom).

SELECT *
FROM orders;

SELECT MIN(freight) AS 'Carga minima', MAX(freight) AS 'Carga Maxima'
FROM orders
WHERE ship_country = 'UK';

/* 4.Qu√© productos se venden por encima del precio medio:
Despu√©s de analizar los resultados de alguna de nuestras consultas anteriores, 
desde el departamento de Ventas quieren conocer qu√© productos en concreto se venden por encima del precio medio para todos los productos de la empresa,
 ya que sospechan que dicho n√∫mero es demasiado elevado. Tambi√©n quieren que ordenemos los resultados por su precio de mayor a menor.
üìåNOTA: para este ejercicio puedes necesitar dos consultas separadas y usar el resultado de la primera para filtrar la segunda.
*/
SELECT COUNT(product_id) AS 'Recuento Art.' , AVG(unit_price) AS 'Media Total'
FROM products;

SELECT product_id
FROM products
WHERE unit_price > 28.87
ORDER BY product_id ASC;


/* 5. Qu√© productos se han descontinuado:
De cara a estudiar el hist√≥rico de la empresa nos piden una consulta para conocer el n√∫mero de productos que se han descontinuado.
El atributo Discontinued es un booleano: si es igual a 1 el producto ha sido descontinuado.
*/

SELECT *
FROM products;

SELECT COUNT(product_id)
FROM products
WHERE discontinued = 1;

/* 6. Detalles de los productos de la query anterior:
Adicionalmente nos piden detalles de aquellos productos no descontinuados, sobre todo el ProductID y ProductName. 
Como puede que salgan demasiados resultados, nos piden que los limitemos a los 10 con ID m√°s elevado, 
que ser√°n los m√°s recientes. No nos pueden decir del departamento si habr√° pocos o muchos resultados, pero lo limitamos por si acaso.
*/

SELECT product_id, product_name
FROM products
WHERE discontinued <> 1
ORDER BY product_id DESC
LIMIT 10;

SELECT product_id, product_name
FROM products
WHERE discontinued <> 1
ORDER BY product_id ASC
LIMIT 10
OFFSET 67;

/* 7.Relaci√≥n entre n√∫mero de pedidos y m√°xima carga:
Desde log√≠stica nos piden el n√∫mero de pedidos y la m√°xima cantidad de carga de entre los mismos (freight) 
que han sido enviados por cada empleado (mostrando el ID de empleado en cada caso).
*/

SELECT *
FROM orders;

SELECT COUNT(order_id), MAX(freight), employee_id
FROM orders
GROUP BY employee_id;

/* 8. Descartar pedidos sin fecha y ord√©nalos:
Una vez han revisado los datos de la consulta anterior, nos han pedido afinar un poco m√°s el "disparo". En el resultado anterior se han incluido muchos
pedidos cuya fecha de env√≠o estaba vac√≠a, por lo que tenemos que mejorar la consulta en este aspecto. Tambi√©n nos piden que ordenemos los resultados
seg√∫n el id del empleado para que la visualizaci√≥n sea m√°s sencilla.
*/


SELECT COUNT(order_id), MAX(freight), employee_id, shipped_date
FROM orders
WHERE shipped_date IS NOT NULL
GROUP BY employee_id, shipped_date;


/* 9. N√∫meros de pedidos por d√≠a:
El siguiente paso en el an√°lisis de los pedidos va a consistir en conocer mejor la distribuci√≥n de los mismos seg√∫n las fechas. 
Por lo tanto, tendremos que generar una consulta que nos saque el n√∫mero de pedidos para cada d√≠a, mostrando de manera separada el d√≠a (DAY()),
 el mes (MONTH()) y el a√±o (YEAR()). 
*/
 
 SELECT COUNT(order_id)
 FROM orders
 
 SELECT order_date
 FROM orders
 LIMIT 10;
 
SELECT 
    COUNT(order_id) AS order_count, 
    DATE(order_date) AS order_day,
    MONTH(order_date) AS order_month,
    YEAR(order_date) AS order_year
FROM orders
GROUP BY order_day, order_month, order_year;

/* 10. N√∫mero de pedidos por mes y a√±o:
La consulta anterior nos muestra el n√∫mero de pedidos para cada d√≠a concreto, pero esto es demasiado detalle. Genera una modificaci√≥n de 
la consulta anterior para que agrupe los pedidos por cada mes concreto de cada a√±o. */

SELECT 
    COUNT(order_id) AS order_count, 
    MONTH(order_date) AS order_month,
    YEAR(order_date) AS order_year
FROM orders
GROUP BY order_month, order_year;


/* 11. Seleccionad las ciudades con 4 o m√°s empleadas:
Desde recursos humanos nos piden seleccionar los nombres de las ciudades con 4 o m√°s empleadas de cara a estudiar la apertura de nuevas oficinas*/

SELECT city, COUNT(employee_id)
FROM employees
GROUP BY city
HAVING  COUNT(employee_id) > 4;


/* 12. Cread una nueva columna bas√°ndonos en la cantidad monetaria:
Necesitamos una consulta que clasifique los pedidos en dos categor√≠as ("Alto" y "Bajo") en funci√≥n de la cantidad monetaria total que han supuesto:
por encima o por debajo de 2000 euros*/

SELECT order_id, (quantity * unit_price), 
CASE
	WHEN (quantity * unit_price) > 2000 THEN "Alto"
    WHEN (quantity * unit_price) < 2000 THEN "Bajo"
    END AS clasificacion_pedidos
FROM order_details;   